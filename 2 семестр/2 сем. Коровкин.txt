// Вопрос 2.  
#include <iostream>
#include <string>
using namespace std;

class Human {
private:
    int age;
    string name;
public:
    static int count;
    Human(int valueage, string valuename) {
        age = valueage;
        name = valuename;
        count++;
    }
    void Print() {
        cout << "Age: " << age << "  Name:  " << name << endl;
    }

    ~Human() {
        cout << "The destructor was called" << endl;
    }
};

int Human::count = 0;

int main()
{
    Human student(18, "Anya");
    Human student2(19, "Masha");
    student.Print();
    cout << "student.count = " << student.count << " student2.count = " << student2.count << endl;
}

//ПЕРЕГРУЗКА ОПЕРАТОРОВ
//#include<iostream>
//using namespace std;
//class Point {
//private:
//	int x;
//	int y;
//
//public:
//	Point() {//конструктор по умолчанию
//		x = 0;
//		y = 0;
//	}
//	Point(int valueX, int valueY) {
//		x = valueX;
//		y = valueY;
//	}
//
//	Point operator +(const Point& other) {
//		Point temp;
//		temp.x = this->x + other.x;//можно заменить  на любую операцию
//		temp.y = this->y + other.y;
//		return temp;
//	}
//	bool operator ==(const Point& other) {//параметр константный, мы передаем адрес переменной по ссылке(передаем адрес b)
//		if (this->x == other.x && this->y == other.y)//равенство
//		{
//			return true;
//		}
//		else {
//			return false;
//		}
//		/*
//		return !(this->x == other.x && this->y == other.y) //для неравенства
//		*/
//	}
//	Point& operator++() {//префиксная форма(мы должны возвращать ссылку на этот же объект, с которым работаем  )
//		this->x++;//--
//		this->y++;
//		return *this;//возвращаем ссылку на текущий объект над которым проводили операцию
//	}
//
//	Point& operator++(int value) {//постфиксная форма(параметр не передается. он нужен только для отличия компилятору)
//		Point temp(*this);
//		this->x++;//--
//		this->y++;
//		return temp;
//
//	}
//	void Print() {
//		cout << x << endl << y << endl;
//	}
//};
//int main() {
//	Point a(5, 1);
//	Point b(6, 10);
//	++a;//префиксная форма
//	a.Print();
//	b++;
//	b.Print();
//	Point c = a + b;
//	c.Print();
//
//	bool result = a == b;
//	cout << result << endl;
//	/*if (a == b) {
//		result = true;
//	}
//	else
//	{
//		result = false;
//	}*/
//}


// СИНГЛТОН
//// Singleton.h
//class Singleton
//{
//{
//private:
//	static Singleton* p_instance;
//	// Конструкторы и оператор присваивания недоступны клиентам
//	Singleton() {}
//	Singleton(const Singleton&);
//	Singleton& operator=(Singleton&);
//public:
//	static Singleton* getInstance() {
//		if (!p_instance)
//			p_instance = new Singleton();
//		return p_instance;
//	}
//};

// Геттеры и сеттеры

#include <iostream>
using namespace std;

class Point {
private:
    int x;
    int y;
public:
    void SetY(int valueY) {
        y = valueY;
    }
    int GetX() {
        return x;
    }
    void Print() {
        cout << x << "  " << y;
    }
};

int main()
{
    Point a;
    a.GetX();
    a.SetY(5);
    a.Print();
}

// 3 (try throw catch)

#include <iostream>
using namespace std;

int main() {
    setlocale(LC_ALL, "Russian");
    try {
        int MomsAge = 30;
        int SonsAge = 34;
        if (SonsAge > MomsAge) {
            throw 0;
        }
    }
    catch (int x) {
        cout << "Сын не может быть старше матери. Код ошибки: " << x;
    }
}

// 4 вопрос. Шаблоны. 

#include <iostream>
using namespace std;

template <typename T>
T sum(T a, T b) {
    return a + b;
}

template <typename T1>
class Printer {
public:
    void Print(T1 value) {
        cout << value << endl;
    }
};

template <>
class Printer<double> {
public:
    void Print(double value) {
        cout << "____" << value << "_____" << endl;
    }
};

int main() {
    double y = 4.35, x = 8.5;
    int x1 = 6, y1 = 3;
    cout << sum(y, x) << endl;
    cout << sum(y1, x1) << endl;

    Printer <int> a;
    a.Print(5);
    Printer <double> b;
    b.Print(4.25);
}

// 5. Итераторы. 

#include <iostream>
#include <list>
#include <vector>
#include <iterator>
#include <algorithm>

using namespace std;


int main() {
    list <int> MyList = { 5,2,3,7,8 };
    list<int>::iterator it;
    it = MyList.begin();
    it++;
    cout << *it << endl;
    vector<int> MyVector = { 1,3,4,3,6,4 };
    for (vector<int>::reverse_iterator r_it = MyVector.rbegin(); r_it != MyVector.rend(); r_it++) {
        cout << *r_it << " ";
    }
}

// 6. Контейнеры. 

#include <iostream>
#include <map>
#include <set>
#include <iterator>
#include <algorithm>

using namespace std;


int main() {
    set <int> MySet = { 1,8,7,5,4 };
    for (set<int>::iterator it = MySet.begin(); it != MySet.end(); it++) {
        cout << *it << " ";
    }
    map <int, int> MyMap;
    MyMap[0] = 1;
}

//КОНТЕЙНЕРЫ
//#include<iostream>
//#include<vector>
//#include<list>
//#include<forward_list>
//#include<deque>
//using namespace std;
////int main() {
////	vector<int> v;
////	v.push_back(1);
////	v.push_back(2);
////	v.push_back(3);
////	v.push_back(4);
////	v.pop_back();
////	v.at(3);//доступ к элементу под номером 3
////	for (int i = 0; i < v.size(); i++) {
////		cout << v[i] << endl;
////	}
////}
//
////int main() {
////	list<int> List;
////	List.push_back(43);
////	List.push_front(23);//добавление в начало
////	list<int>::iterator it =List.begin();// только итераторы. длля вывода через *
////	for (auto i=List.begin(); i!=List.end();i++)
////	{
////		cout << *i << endl;
////	}
////}
////int main() {
////
////	forward_list<int>fl;
////	fl.push_front(6);
////	//используем итераторы
////	forward_list<int>::iterator it = fl .begin();
////	//it-- нельзя
////
////
////}
//
//int main() {
//	deque<int>dq = { 1,9,4 };
//	//[] можно использовать 
//
//}

// Задание 8. 

#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>

using namespace std;


int main() {
    vector <int> v = { 1,4,2,6,9,3,0,3 };
    vector <int> v2 = { 1,4,2,6,7,1,5,9 };

    cout << "count: " << count(v.begin(), v.end(), 3) << endl;
    
    //cout << "mismatch: "<<  mismatch(v.begin(), v.end(), v2.begin(), v2.end()) << endl;

    vector <int>::iterator it;
    it = find(v.begin(), v.end(), 3);
    if (it != v.end())
        cout << "find: " << *it;
}

// Задание 9. 

#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>

using namespace std;

class Human {
public:
    char name;
    int age;
};

class Student : public Human {
    char group;
};


int main() {

}

// Задание 10. Виртуальные методы и интерфейсы

#include <iostream>

using namespace std;

class IBicycle {
public:
    void virtual TwistTheWheel() = 0;
    void virtual Ride() = 0;
};

class SimpleBicycle : public IBicycle {
public:
    void TwistTheWheel() override
    {
        cout << "Метод TwistTheWheel() Symple Bicycle" << endl;
    }
    void Ride() override {
        cout << "Метод TwistTheWheel() Symple Bicycle" << endl;
    }
};

class SportBicycle : public IBicycle {
public:
    void TwistTheWheel() override
    {
        cout << "Метод TwistTheWheel() Sport Bicycle" << endl;
    }
    void Ride() override {
        cout << "Метод TwistTheWheel() Sport Bicycle" << endl;
    }
};

class Human {
public:
    void Rideon(IBicycle& bicycle) {
        cout << "Крутим руль" << endl;
        bicycle.TwistTheWheel();
        cout << endl << "Поехали" << endl;
        bicycle.Ride();
    }
};

int main() {
    setlocale(LC_ALL, "Russian");
    SimpleBicycle sb;
    Human h;
    h.Rideon(sb);
}

// 15.Пространство имён

#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>

using namespace std;

namespace first {
    void foo() {
        cout << "Foo first" << endl;
    }
}

namespace second {
    void foo() {
        cout << "Foo second" << endl;
    }
}


int main() {
    first::foo();
    second::foo();
}

// 16. Лямбда ф-ций в с++.

#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>

using namespace std;


int main() {
    vector <int> v = { 1,4,3,7,5 };
    sort(v.begin(), v.end(), [](int a, int b) {return a > b; });
    for (int i = 0; i < v.size(); i++) {
        cout << v[i] << "  ";
    }
}